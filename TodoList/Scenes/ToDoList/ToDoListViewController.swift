//
//  ToDoListViewController.swift
//  TodoList
//
//  Created by Mac on 21.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Протокол контроллера экрана с задачами пользователя
protocol IToDoListViewConroller: AnyObject {
	/// отрисовать экран
	/// - Parameter viewData: данные для отрисовки
	func render(viewData: ToDoList.ViewModel.ViewData)
}


/// контроллер экрана с задачами пользователя
class ToDoListViewController: UITableViewController, IToDoListViewConroller {
	/// интерактор экрана с задачами пользователя
	var interactor: ToDoListBusinessLogic?
	/// данные для отрисовки экрана
	var viewData: ToDoList.ViewModel.ViewData = ToDoList.ViewModel.ViewData(tasksBySections: [])

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}

	private func setup() {
		let viewController = self
		let interactor = ToDoListInteractor(worker: ToDoListWorker())
		let presenter = ToDoListPresenter()
		viewController.interactor = interactor
		interactor.presenter = presenter
		presenter.viewController = viewController
	}

	override func viewDidLoad() {
		super.viewDidLoad()
		tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
		let request = ToDoList.Request(isLoaded: isViewLoaded)
		interactor?.viewLoaded(request: request)
	}

	func render(viewData: ToDoList.ViewModel.ViewData) {
		self.viewData = viewData
		tableView.reloadData()
	}

	// MARK: - TableView DataSource
	override func numberOfSections(in tableView: UITableView) -> Int {
		viewData.tasksBySections.count
	}

	override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
		viewData.tasksBySections[section].title
	}

	override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		let section = viewData.tasksBySections[section]
		return section.tasks.count
	}

	override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		let tasks = viewData.tasksBySections[indexPath.section].tasks
		let taskData = tasks[indexPath.row]
		let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
		var contentConfiguration = cell.defaultContentConfiguration()

		switch taskData {
		case .importantTask(let task):
			let redText = [NSAttributedString.Key.foregroundColor:  UIColor.red]
			let taskText = NSMutableAttributedString(string: "\(task.priority) ", attributes: redText )
			taskText.append(NSAttributedString(string: task.name))
			
			contentConfiguration.attributedText = taskText
			contentConfiguration.secondaryText = task.deadLine
			contentConfiguration.secondaryTextProperties.color = task.isOverdue ? .red : .black
			cell.accessoryType = task.isDone ? .checkmark : .none
		case .regularTask(let task):
			contentConfiguration.text = task.name
			cell.accessoryType = task.isDone ? .checkmark : .none
		}

		cell.tintColor = .red
		contentConfiguration.secondaryTextProperties.font = UIFont.systemFont(ofSize: 16)
		contentConfiguration.textProperties.font = UIFont.boldSystemFont(ofSize: 19)
		cell.contentConfiguration = contentConfiguration
		
		return cell
	}
	// MARK: - TableView Delegate
	override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		interactor?.didTapOnCell(request: ToDoList.TapRequest(indexPath: indexPath))
	}
}
