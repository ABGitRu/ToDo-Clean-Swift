//
//  ToDoListWorker.swift
//  TodoList
//
//  Created by Mac on 21.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// протокол работника экрана пользовательских задач
protocol IToDoListWorker {
	/// просчитать и вернуть данные для отображения на экране пользовательских задач
	/// - Returns: данные для отображения
	func mapViewData() -> ToDoList.ViewModel.ViewData

	/// отметить таску как выполненую или не выполненую в пользовательских задачах
	/// - Parameter indexPath: индекс задачи
	func checkTask(at indexPath: IndexPath)
}

/// класс работника пользовательских задач
class ToDoListWorker {
	/// менеджер задач работающий с распределением по секциям
	var sectionManager: ISectionForTaskManagerAdapter!

	/// Инициализирует работника и подставляет в sectionManager текущие секции с задачами
	init() {
		let taskManager = OrderedTaskManager(taskManager: TaskManager())
		let repository: ITaskRepository = TaskRepositoryStub()
		taskManager.addTasks(tasks: repository.getTasks())
		let sections = SectionForTaskManagerAdapter(taskManager: taskManager)
		sectionManager = sections
	}

	private func mapTasksData(tasks: [Task]) -> [ToDoList.ViewModel.ViewData.Task] {
		tasks.map{ mapTaskData(task: $0) }
	}

	private func mapTaskData(task: Task) -> ToDoList.ViewModel.ViewData.Task {
		if let task = task as? ImportantTask {
			let result = ToDoList.ViewModel.ViewData.ImportantTask(
				name: task.title,
				isDone: task.completed,
				isOverdue: task.deadLine < Date(),
				deadLine: "Deadline: \(task.deadLine)",
				priority: "\(task.taskPriority)"
			)
			return .importantTask(result)
		} else {
			return .regularTask(ToDoList.ViewModel.ViewData.RegularTask(name: task.title, isDone: task.completed))
		}
	}
}

// MARK: - IToDoListWorker protocol
extension ToDoListWorker: IToDoListWorker {
	
	func mapViewData() -> ToDoList.ViewModel.ViewData {
		
		var sections = [ToDoList.ViewModel.ViewData.Section]()
		for section in sectionManager.getSections() {
			let sectionData = ToDoList.ViewModel.ViewData.Section(
				title: section.title,
				tasks: mapTasksData(tasks: sectionManager.getTasksForSection(section: section) )
			)
			sections.append(sectionData)
		}
		return ToDoList.ViewModel.ViewData(tasksBySections: sections)
	}

	func checkTask(at indexPath: IndexPath) {
		let section = sectionManager.getSection(forIndex: indexPath.section)
		let task = sectionManager.getTasksForSection(section: section)[indexPath.row]
		task.completed.toggle()
	}
}
